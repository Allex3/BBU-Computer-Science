     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern printf, scanf, fread, fopen, fclose
    11                                  import printf msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import fopen msvcrt.dll
    15                                  import fclose msvcrt.dll
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 00000000                    n dd 0
    19 00000004 00000000                    count dd 0
    20 00000008 00<rept>                    file_name times 50 db 0
    21 0000003A 00000000                    character dd 0
    22                                      
    23 0000003E 257300                      format db "%s", 0
    24 00000041 257500                      format_n db "%u", 0
    25 00000044 636F756E74206F6620-         format_end db "count of characters with the %u'th bit 1: %u", 0
    25 0000004D 636861726163746572-
    25 00000056 732077697468207468-
    25 0000005F 652025752774682062-
    25 00000068 697420313A20257500 
    26 00000071 7200                        access_mode db "r", 0
    27 00000073 FFFFFFFF                    file_descriptor dd -1
    28                                      
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33 00000000 68[08000000]                    push dword file_name
    34 00000005 68[3E000000]                    push dword format
    35 0000000A FF15[00000000]                  call [scanf]
    36 00000010 83C408                          add esp, 4*2
    37                                          
    38 00000013 68[71000000]                    push dword access_mode
    39 00000018 68[08000000]                    push dword file_name
    40 0000001D FF15[00000000]                  call [fopen]
    41 00000023 83C408                          add esp, 4*2
    42                                          
    43 00000026 A3[73000000]                    mov [file_descriptor], eax
    44 0000002B 83F800                          cmp eax, 0
    45 0000002E 0F8494000000                    je end_of_file
    46                                          
    47 00000034 68[00000000]                    push dword n
    48 00000039 68[41000000]                    push dword format_n
    49 0000003E FF15[00000000]                  call [scanf]
    50 00000044 83C408                          add esp, 4*2
    51                                  
    52                                          ; if not 0<=n<=7 then we go to end_of_file
    53 00000047 833D[00000000]07                cmp dword[n], 7
    54 0000004E 7F78                            jg end_of_file
    55                                          
    56 00000050 833D[00000000]00                cmp dword[n], 0
    57 00000057 7C6F                            jl end_of_file
    58                                          
    59                                         
    60                                          
    61                                          ;infinite loop, stops when no more characters in file
    62 00000059 B900000000                      mov ecx, 0
    63                                          count_1_bits:
    64                                              ; call fread(character, 1, 1, file_descriptor) <- reads one byte from the file, returns 0 if file is empty so nothing is read
    65                                              
    66 0000005E FF35[73000000]                      push dword [file_descriptor]
    67 00000064 6A01                                push dword 1
    68 00000066 6A01                                push dword 1
    69 00000068 68[3A000000]                        push dword character
    70 0000006D FF15[00000000]                      call [fread]
    71 00000073 83C410                              add esp, 4*4
    72                                              
    73 00000076 83F800                              cmp eax, 0 ; number of bytes read is saved in eax, if it is 0 file is empty, we read all the bytes so jump after loop
    74 00000079 7424                                je after_loop
    75                                              
    76                                              
    77 0000007B A1[00000000]                        mov eax, [n] ; 0<=n<8, but is in a dword because it was read from a console, but it fits in AL
    78 00000080 88C1                                mov CL, AL
    79 00000082 B301                                mov BL, 1
    80 00000084 D2E3                                shl BL, CL ; BL<<CL, for example if n =5, then BL=1<<CL=5, and it will be 00100000
    81                                              ; now the N'th bit of the character can be AND'ed with the N'th isolated bit from the above byte
    82                                              ; and if we get 0 then the N'th bit of the character byte is 0, if we get 1 from the AND then it will be above 0
    83 00000086 A1[3A000000]                        mov eax, [character] ;character is dd so it could be read, but it's size 1 so it fits in AL
    84 0000008B 20D8                                and AL, BL 
    85                                              
    86 0000008D 3C00                                cmp AL, 0
    87 0000008F 7407                                JE end_of_loop; 0, jump at the end of the loop
    88                                              
    89                                              ; did not jump, count the 1 bits
    90 00000091 8305[04000000]01                    add dword[count], 1
    91                                              
    92                                              end_of_loop:
    93                                              
    94 00000098 B900000000                          mov ecx, 0 ; 0-1 = -1 = FFFFFFFF, ensuring an infinite loop (or jmp instruction could have worked)
    95                                              
    96 0000009D E2BF                            loop count_1_bits
    97                                          
    98                                          after_loop:
    99                                          
   100 0000009F FF35[73000000]                  push dword [file_descriptor]
   101 000000A5 FF15[00000000]                  call [fclose]
   102 000000AB 83C404                          add esp, 4
   103                                          
   104 000000AE FF35[04000000]                  push dword [count] ; output the count
   105 000000B4 FF35[00000000]                  push dword [n]
   106 000000BA 68[44000000]                    push dword format_end
   107 000000BF FF15[00000000]                  call [printf]
   108 000000C5 83C408                          add esp, 4*2
   109                                         
   110                                          
   111                                          end_of_file:
   112                                          
   113                                          ; exit(0)
   114 000000C8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   115 000000CA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
