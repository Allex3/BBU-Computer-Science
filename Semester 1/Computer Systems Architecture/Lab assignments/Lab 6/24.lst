     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 06000000B501000015-         s dd 0110b, 00110110101b, 10101b, 11b, 1110b
    13 00000009 000000030000000E00-
    13 00000012 0000               
    14                                      len_s equ ($-s)/4
    15 00000014 00000000<rept>              d times len_s dd 0
    16                                  
    17                                  ; 24. Being given a string of doublewors, build another string of doublewords which will include only the doublewords from the given string which have an even number of bits with the value 1.
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 BE[00000000]                    mov ESI, s
    21 00000005 BF[14000000]                    mov EDI, d
    22 0000000A B905000000                      mov ECX, len_s
    23 0000000F FC                              CLD ; ascending order for s
    24 00000010 E32D                            JECXZ endOfProgram
    25                                          buildEvenString:
    26 00000012 AD                                  LODSD ; load dd from esi into EAX, esi+=4 to go to the next element of the string
    27                                              ;since PF is set only if the least significant byte of a dword has even number of bits set, and we need to count all the bits to see, we cannot count with PF
    28                                              ; so just iterate through each bit :') 
    29 00000013 89CB                                mov EBX, ECX ; save current ECX
    30 00000015 50                                  push EAX ; put eax on the stack to pop it back after counting its bits
    31 00000016 B920000000                          mov ECX, 32 ; run the loop for all the bits that could be set of EAX
    32 0000001B BA00000000                          mov EDX, 0 ; count the bits set
    33                                              countBits:
    34 00000020 A901000000                              test EAX, 1 ; if 1, least significatn bit set, 0 then it's 0, so don't count it
    35 00000025 7401                                    JZ notAdd ; jump to end if 0, don't add it
    36 00000027 42                                      inc EDX ; edx++, add the bit
    37                                                  notAdd:
    38 00000028 D1E8                                    shr eax, 1; go 1 bit to the right to check the next bit (i.e. put it in the least significant position to test it with 1)
    39 0000002A 83F800                                  cmp EAX, 0 
    40 0000002D 7402                                    JE outOfLoop ;eax = 0, get out of the loop, no more bits to check!
    41 0000002F E2EF                                loop countBits
    42                                              
    43                                              outOfLoop:
    44 00000031 58                                  pop EAX
    45 00000032 89D9                                mov ECX, EBX ; put the old ECX back 
    46 00000034 F7C201000000                        test EDX, 1 ; if EDX has the least significant bit set, then the count of bits in EAX is odd, otherwise it's even
    47 0000003A 7501                                JNZ endOfLoop ; jump to the end of loop if the count is odd, otherwise add it
    48 0000003C AB                                  STOSD ; store the dword from eax into memory at d, then EDI+=4, go to the next offset in d where you should put the next value, if there will be another
    49                                              endOfLoop:
    50 0000003D E2D3                            loop buildEvenString
    51                                    
    52                                          endOfProgram:
    53                                      
    54                                          ; exit(0)
    55 0000003F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000041 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
