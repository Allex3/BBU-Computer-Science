     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 517203707106037016          s db 0x51, 0x72, 0x03, 0x70, 0x71, 0x06, 0x03, 0x70, 0x16
    14                                      s_len equ ($-s)
    15 00000009 0370                        subs db 0x03, 0x70 
    16                                      subs_len equ ($-subs)
    17 0000000B 00<rept>                    d times s_len db 0 ; destination string
    18 00000014 00000000                    currentIndex dd 0
    19                                      
    20                                      
    21                                  ; 28. Being given a string of bytes and a substring of this string, eliminate all occurrences of this substring from the initial string.
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 B90A000000                      mov ecx, 10
    25 00000005 66B833FF                        mov ax, 0xFF33
    26                                          sal ax, ecx
    26          ******************       error: invalid combination of opcode and operands
    27 00000009 BE[00000000]                    mov esi, s
    28 0000000E B909000000                      mov ecx, s_len
    29 00000013 BF[0B000000]                    mov edi, d
    30 00000018 FC                              cld
    31 00000019 E335                            jecxz endOfProgram
    32                                          removeSubString:
    33                                              ; at each position, check if the current string of length of subs os subs
    34 0000001B 8935[14000000]                      mov [currentIndex], esi ; save currentindex in memory
    35                                              
    36 00000021 89F2                                mov edx, esi ; save the current source index in edx to iterate through it and current ecx in EBX
    37 00000023 89CB                                mov ebx, ecx
    38 00000025 BE[09000000]                        mov esi, subs ;position of subs, iterate it's length
    39 0000002A B902000000                          mov ecx, subs_len
    40                                              ;and iterate through edx in the s string and compare it with esi in the subs string
    41                                              
    42                                              checkSubstring:
    43 0000002F AC                                      lodsb ; load from esi the current byte of the substring, esi++ in subs
    44 00000030 3A02                                    cmp al, byte[edx] ; compare subs[0] with s[i], and go forward like this                           
    45 00000032 750F                                    jne notEqualSubs;if they're NOT equal, jump outside of loop and add the current element as normal to d, because the substring is not equal       
    46 00000034 42                                      inc edx ; edx++ to go to the next element of s to compare it with subs[1], and so on
    47                                                  
    48 00000035 E2F8                                loop checkSubstring
    49                                              ; if we exited the loop, that means ALL OF THEM are equal, so run the next set of instructions
    50                                              
    51 00000037 89D6                                mov esi, edx ; edx is the index of s, but skipped after all the elements of subs, put it in main esi
    52                                              ; skipped over subs_len elements, so the main iterator gets decremented by subs_len
    53 00000039 89D9                                mov ecx, ebx
    54 0000003B 83E902                              sub ecx, subs_len
    55 0000003E 41                                  inc ecx ; because after subtracting the substring we now ignore from ecx, it's at the good index we should be at in the NEXT iteration, the one after the substring, so increment it by 1 
    56                                              ; becuase oherwise it will miss one element from the end of the string, and so on with every deleting of the substring
    57 0000003F E30F                                jecxz endOfProgram ; if ecx becomes 0 before exiting the loop (case when the substring is the last substring of the string)
    58 00000041 EB0B                                jmp endOfLoop
    59                                              
    60                                              notEqualSubs:
    61 00000043 8B35[14000000]                          mov esi, [currentIndex]; restore current index of s and add it to d as normal
    62 00000049 A4                                      movsb ; [edi] = [esi], edi++, esi++, basically put the current element in the dest. string
    63 0000004A 89D9                                    mov ecx, ebx ; put only one element, so get back the iterator of the main loop   
    64 0000004C EB00                                    jmp endOfLoop         
    65                                                              
    66                                                  
    67                                               endOfLoop:
    68 0000004E E2CB                            loop removeSubString
    69                                          endOfProgram:
    70                                          ; exit(0)
    71 00000050 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 00000052 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
