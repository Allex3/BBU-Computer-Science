     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0A                          a db 10
    14 00000001 C8                          b db 200 ;this way [(a-d)+b]*2 will be a word, but byte*2 = byte*byte = word in AX anywayy
    15 00000002 03                          c db 3 ;c is a byte, but make it a word for division
    16 00000003 08                          d db 8
    17 00000004 <res 00000004>              res resw 2
    18                                      
    19                                  
    20                                  ;[(a-d)+b]*2/c 
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 A0[00000000]                    mov AL, [a]
    24 00000005 2A05[03000000]                  sub AL, [d] ;a-d
    25 0000000B 0205[01000000]                  add AL, [b] ;a-d+b
    26 00000011 B302                            mov BL, 2
    27 00000013 F6E3                            mul BL ; AX=AL*BL = [(a-d)+b]*2
    28                                          
    29 00000015 66BA0000                        mov DX, 0 ;DX:AX = [(a-d)+b]*2 now
    30 00000019 8A1D[02000000]                  mov BL, [c]
    31 0000001F B700                            mov BH, 0 ; now BX=BH:BL = c, at the lower byte because c is only a byte, to do the division dword/word instead of word/byte
    32 00000021 66F7F3                          div BX ;AX = DX:AX/BX, remainder in DX
    33                                          
    34 00000024 66A3[04000000]                  mov [res], AX ;2 bytes for the quotient
    35 0000002A 668915[06000000]                mov [res+2], DX ;these two bytes (a word) for the remainder
    36                                          
    37                                      
    38                                          ; exit(0)
    39 00000031 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 00000033 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
