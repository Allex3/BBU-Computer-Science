     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 05                          a db 5
    14 00000001 08                          b db 8
    15 00000002 08                          c db 8
    16 00000003 2C01                        d dw 300
    17 00000005 <res 00000004>              res resd 1 ; reserve 1 double word for the result (DX:AX, pop them here)
    18                                      
    19                                      
    20                                  
    21                                  ; 3*[20*(b-a+2)-10*c]+2*(d-3)
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; the byte operations: AX = AL*bytevar; word: DX:AX = AX * wordvar (d)
    25                                          ;b-a+2 in AL, 20 in BL
    26 00000000 A0[01000000]                    mov AL, [b]
    27 00000005 2A05[00000000]                  sub AL, [a]
    28 0000000B 0402                            add AL, 2
    29 0000000D B314                            mov BL, 20
    30 0000000F F6E3                            mul BL ; result in AX, AX=(b-a+2)*20
    31                                          ; move it to BX
    32 00000011 6689C3                          mov BX, AX
    33                                          ; do 10*c, 10 in AL, mul [c]
    34 00000014 B00A                            mov AL, 10
    35 00000016 F625[02000000]                  mul byte[c] ; AX = 10*c
    36                                          ; now BX = BX-AX = 20*(b-a+2)-10*c 
    37 0000001C 6629C3                          sub BX, AX
    38                                          
    39                                          ; now we have to do 3*BX+2*(d-3)
    40 0000001F 66B80300                        mov AX, 3
    41 00000023 66F7E3                          mul BX ;DX:AX = AX*BX
    42                                          
    43                                          ; put DX:AX in ECX, basically ECX = 3*[20*(b-a+2)-10*c] now
    44                                          ; then do 2*(d-3), d is a word, so result in DX:AX, save it in EAX, then do add EAX, ECX, final result in EAX
    45                                          ; then move it to the double word res in memory
    46 00000026 6652                            push DX
    47 00000028 6650                            push AX
    48 0000002A 59                              pop ECX ; ECX = DX:AX, don't have to worry about the other registers now so use them
    49                                          
    50 0000002B 66A1[03000000]                  mov AX, [d]
    51 00000031 6683E803                        sub AX, 3 ; AX=d-3
    52 00000035 66BB0200                        mov BX, 2
    53 00000039 66F7E3                          mul BX ; DX:AX = AX*BX = (d-3)*2
    54                                          
    55 0000003C 6652                            push DX
    56 0000003E 6650                            push AX
    57 00000040 58                              pop EAX
    58                                          
    59 00000041 01C8                            add EAX, ECX
    60                                          
    61 00000043 A3[05000000]                    mov [res], EAX
    62                                          
    63                                          
    64                                          
    65                                          
    66                                          
    67                                      
    68                                          ; exit(0)
    69 00000048 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 0000004A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
