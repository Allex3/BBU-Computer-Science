     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0A                          a db 10
    14 00000001 03                          b db 3
    15 00000002 05                          c db 5
    16 00000003 0B                          d db 11
    17 00000004 <res 00000001>              res resb 1
    18                                  
    19                                  ; (d+d-b)+(c-a)+d, store: d+d-b = AL, c-a = BL, result in AL 
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 A0[03000000]                    mov AL, [d]
    23 00000005 00C0                            add AL, AL ;d+d
    24 00000007 2A05[01000000]                  sub AL, byte[b] ;d+d-b (the byte[var] is unnecessary since all the variables and the registers
    25                                          ; used in this program store only bytes, so when working with AL, it takes only a byte from the memory location
    26                                          
    27 0000000D 8A1D[02000000]                  mov BL, [c]
    28 00000013 2A1D[00000000]                  sub BL, [a] ; BL=c-a
    29                                          
    30 00000019 00D8                            add AL, BL ; d+d-b + c-a
    31 0000001B 0205[03000000]                  add AL, [d] ; (d+d-b)+(c-a)+d
    32                                          
    33 00000021 A2[04000000]                    mov [res], AL ; res has the result
    34                                          
    35                                      
    36                                          ; exit(0)
    37 00000026 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000028 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
