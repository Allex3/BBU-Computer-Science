     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 05                          a db 5
    14 00000001 02                          b db 2
    15 00000002 0F                          c db 15
    16 00000003 2301                        d dw 291 
    17 00000005 <res 00000002>              res resw 1
    18                                  
    19                                  ; (10*a-5*b)+(d-5*c) = in this example 256 = 0x0100
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B00A                            mov AL, 10
    23 00000002 F625[00000000]                  mul byte[a] ; AX = 10*a, but it in BX
    24 00000008 6689C3                          mov BX, AX
    25                                          
    26 0000000B B005                            mov AL, 5
    27 0000000D F625[01000000]                  mul byte[b] ; AX = 5*b
    28 00000013 6629C3                          sub BX, AX ; BX=10*a-5*b, leave it alone, work with CX
    29                                          
    30 00000016 B005                            mov AL, 5
    31 00000018 F625[02000000]                  mul byte[c] ; AX = 5*c
    32 0000001E 662B05[03000000]                sub AX, [d] ;d is a word, so subtract it from AX: AX=5*c-d, now negate it
    33 00000025 66F7D8                          neg AX ;AX = d-5*c
    34                                          
    35 00000028 6601D8                          add AX, BX ; (10*a-5*b)+(d-5*c)
    36                                          
    37 0000002B 66A3[05000000]                  mov [res], AX
    38                                          
    39                                          
    40                                      
    41                                          ; exit(0)
    42 00000031 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 00000033 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
