     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 00000100                    a dd 0x10000
    14 00000004 10                          b db 0x10
    15 00000005 0A                          c db 0xA
    16 00000006 12                          d db 0x12
    17 00000007 0001000000000000            x dq 0x100
    18 0000000F <res 00000004>              r resd 1
    19                                  
    20                                  ;a-(7+x)/(b*b-c/d+2); a-doubleword; b,c,d-byte; x-qword, unsigned
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; do b*b-c in AX
    24 00000000 A0[04000000]                    mov AL, byte[b]
    25 00000005 F625[04000000]                  mul byte[b] ; AX=AL*b=b*b
    26 0000000B 6689C3                          mov BX, AX ; BX =b*b
    27                                          
    28 0000000E A0[05000000]                    mov AL, byte[c]
    29 00000013 B400                            mov AH, 0 ; AL->AX unsigned conversion
    30 00000015 F635[06000000]                  div byte[d] ; AL = AX/d = c/d unsigned division
    31 0000001B B400                            mov AH, 0 ; AL->AX
    32 0000001D 6629C3                          sub BX, AX; BX=b*b-c/d
    33                                          
    34 00000020 6683C302                        add BX, 2; BX = (b*b-c/d+2)
    35                                          
    36                                          ;now compute the left part of the main division, i.e. a-(7+x)
    37                                          ;7+x will be a qword, so make a a qword, it's now a dword, put it in EAX and cdq
    38 00000024 A1[00000000]                    mov EAX, dword[a]
    39 00000029 BA00000000                      mov EDX, 0 ; EAX -> EDX:EAX unsigned conversion
    40 0000002E 8305[07000000]07                add dword[x], 7; x=7+x now, basically add to the lowest 4 bytes, but 7 is a byte, so it works in 32bit assembly
    41 00000035 2B05[07000000]                  sub EAX, [x] ; lower 4 bytes of x
    42 0000003B 1B15[0B000000]                  sbb EDX, [x+4]; higher 4 bytes of x (little endian)
    43                                          ;now EDX:EAX has a-(7+x)
    44                                          
    45                                          ;now do the main division a-(7+x)/(b*b-c/d+2) = EDX:EAX/BX, but convert BX to EBX
    46 00000041 6A00                            push dword 0
    47 00000043 6653                            push BX
    48 00000045 5B                              pop EBX
    49                                          
    50 00000046 F7F3                            div EBX ; EDX:EAX / EBX -> EAX, so a-(7+x)/(b*b-c/d+2) is in EAX
    51                                          
    52 00000048 A3[0F000000]                    mov [r], EAX
    53                                          
    54                                          
    55                                      
    56                                          ; exit(0)
    57 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
