     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 FF                          a db -0x1
    14 00000001 F7                          b db -0x9
    15 00000002 00FF                        c dw -0x100
    16 00000004 00000100                    e dd 0x10000
    17 00000008 0000000001000000            x dq 0x100000000
    18 00000010 <res 00000008>              r resq 1
    19                                  
    20                                  ; (a-b+c*128)/(a+b)+e-x; a,b-byte; c-word; e-doubleword; x-qword - unsigned = FF FF FF FF 00 01 0C CC
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; do c*128 first, c is a word, so 128 should be a word too
    24                                          ; word*word -> dword: AX*mem8 -> DX:AX
    25 00000000 66B88000                        mov AX, 128 ; AX = 128 which is a word
    26 00000004 66F72D[02000000]                imul word[c] ; DX:AX = 128*c
    27 0000000B 6689C3                          mov BX, AX ; BX= AX = c*128, to make DX:AX -> DX:BX, AX is used for conversions
    28                                          ; basically we just make a a word to add to BX, making it a word and adding it to BX is enough 
    29                                          ; because a is a byte normally, so it fits well in a word and can add to BX with no worry for bits being lost
    30                                          ; and we don't concern with DX (from DX:BX)
    31 0000000E A0[00000000]                    mov al, byte[a]
    32 00000013 6698                            cbw ; AL -> AX = a
    33 00000015 6601C3                          add bx, ax ; bx = bx+a, so dx:bx = c*128+a, now subtract b
    34                                          
    35                                          ;b is also a byte, so apply the same logic
    36 00000018 A0[01000000]                    mov al, byte[b]
    37 0000001D 6698                            cbw ; AL -> AX = b
    38 0000001F 6629C3                          sub bx, ax ; ax = bx-b, so dx:bx = a-b+c*128
    39                                          
    40 00000022 6689D8                          mov AX, BX ; DX:BX -> DX:AX, to use it for division
    41                                          
    42                                          ;now do a+b in BX and divide dx:ax to it
    43 00000025 B700                            mov bh, 0
    44 00000027 8A1D[00000000]                  mov bl, byte[a]
    45 0000002D 021D[01000000]                  add bl, byte[b] ; bl =a+b
    46                                          ; make bl a word, bl -> bx, so put it in AL first to convert it in signed repres.
    47 00000033 6689C1                          mov CX, AX ; save AX in CX to return later
    48 00000036 88D8                            mov AL, BL
    49 00000038 6698                            cbw ; AL-> AX = a+b
    50 0000003A 6689C3                          mov BX, AX ; BX = a+b signed conversion
    51 0000003D 6689C8                          mov AX, CX
    52                                          
    53 00000040 66F7FB                          idiv bx ; dx:ax / bx -> result in AX, remainder in DX, so AX = (a-b+c*128)/(a+b)
    54                                          
    55                                          ;make ax a dword to add e to it
    56 00000043 98                              cwde ; AX -> EAX
    57 00000044 0305[04000000]                  add eax, dword[e] ; eax = (a-b+c*128)/(a+b)+e
    58 0000004A BA00000000                      mov edx, 0 
    59 0000004F 83D200                          adc edx, 0 ; carry from eax+e, maybe, so now edx+e is in EDX:EAX
    60                                          
    61                                          ; thus it is now a qword, subtract x from it
    62 00000052 2B05[08000000]                  sub eax, dword[x]
    63 00000058 1B15[0C000000]                  sbb edx, dword[x+4]
    64                                          
    65 0000005E A3[10000000]                    mov [r], eax
    66 00000063 8915[14000000]                  mov [r+4], edx ; edx:eax at location r
    67                                          
    68                                          
    69                                          
    70                                          ; exit(0)
    71 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
