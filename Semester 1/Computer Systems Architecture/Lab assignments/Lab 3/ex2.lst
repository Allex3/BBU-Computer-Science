     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 0x1
    14 00000001 0001                        b dw 0x100
    15 00000003 00000100                    c dd 0x10000
    16 00000007 0000000001000000            d dq 0x100000000
    17 0000000F <res 00000008>              r resq 1
    18                                  
    19                                  ; ((a + b) + (a + c) + (b + c)) - d
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B800000000                      mov eax, 0 ; to make sure there are no problems at addition
    23 00000005 A0[00000000]                    mov AL, [a]
    24 0000000A 660305[01000000]                add AX, [b] ; eax = a+b
    25 00000011 BB00000000                      mov ebx, 0
    26 00000016 8A1D[00000000]                  mov bl, [a] ;eax = a (000000a)
    27 0000001C 031D[03000000]                  add ebx, [c] ; ebx=a+c, c dword
    28 00000022 01D8                            add eax, ebx ; eax = a+b + a+c
    29                                          
    30                                          ; now do b+c in ebx since we don't use it anymore
    31                                          ; b word and c dword, so add in a dword, make b a dword
    32 00000024 BB00000000                      mov ebx, 0
    33 00000029 668B1D[01000000]                mov bx, word[b]
    34 00000030 031D[03000000]                  add ebx, [c] ; ebx = b+c 
    35 00000036 01D8                            add eax, ebx ;eax = (a+b + a+c + b+c)
    36                                          
    37                                          ;now do this whole sum - d, which is a qword, so transfer it from eax to edx:eax -> make edx 0
    38 00000038 BA00000000                      mov edx, 0
    39                                          ; now subtract lower half of d with eax, and higher half with edx with a carry
    40 0000003D 2B05[07000000]                  sub eax, dword[d] ; in memory it's stored in little endian, so the lowest 4 bytes are at d -> d+3
    41 00000043 1B15[0B000000]                  sbb edx, dword[d+4] ;and higher parts in d+4 -> d+7
    42                                          
    43                                          ; result is in edx:eax, move it into areserved qword
    44 00000049 A3[0F000000]                    mov [r], eax
    45 0000004E 8915[13000000]                  mov [r+4], edx
    46                                          
    47                                      
    48                                          ; exit(0)
    49 00000054 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000056 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
