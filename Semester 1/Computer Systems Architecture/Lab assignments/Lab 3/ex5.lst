     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 0x1
    14 00000001 09                          b db 0x9
    15 00000002 0001                        c dw 0x100
    16 00000004 00000100                    e dd 0x10000
    17 00000008 0000000001000000            x dq 0x100000000
    18 00000010 <res 00000008>              r resq 1
    19                                  
    20                                  ; (a-b+c*128)/(a+b)+e-x; a,b-byte; c-word; e-doubleword; x-qword - unsigned = FF FF FF FF 00 01 0C CC
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; do c*128 first, c is a word, so 128 should be a word too
    24                                          ; word*word -> dword: AX*mem8 -> DX:AX
    25 00000000 66B88000                        mov AX, 128 ; AX = 128 which is a word
    26 00000004 66F725[02000000]                mul word[c] ; DX:AX = 128*c
    27                                          ; basically we just make a a word to add to AX, making it a word and adding it to AX is enough 
    28                                          ; because a is a byte normally, so it fits well in a word and can add to AX with no worry for bits being lost
    29                                          ; and we don't concern with DX
    30 0000000B 66BB0000                        mov bx, 0
    31 0000000F 8A1D[00000000]                  mov bl, byte[a] ; bx = 00a
    32 00000015 6601D8                          add ax, bx ; ax = ax+a, so dx:ax = c*128+a, now subtract b
    33                                          ;b is also a byte, so apply the same logic
    34 00000018 66BB0000                        mov bx, 0
    35 0000001C 8A1D[01000000]                  mov bl, byte[b]
    36 00000022 6629D8                          sub ax, bx ; ax = ax-bx, so dx:ax = a-b+c*128
    37                                          
    38                                          ;now do a+b in BX and divide dx:ax to it
    39 00000025 B700                            mov bh, 0
    40 00000027 8A1D[00000000]                  mov bl, byte[a]
    41 0000002D 021D[01000000]                  add bl, byte[b] ; bl =a+b
    42 00000033 80D700                          adc bh, 0 ;add with carry if the addition doesn't fit on BL, so BX=a+b
    43                                          
    44 00000036 66F7F3                          div bx ; dx:ax / bx -> result in AX, remainder in DX, so AX = (a-b+c*128)/(a+b)
    45                                          
    46                                          ;make ax a dword to add e to it
    47 00000039 6689C3                          mov bx, ax ; save ax temporarily in bx
    48 0000003C B800000000                      mov eax, 0
    49 00000041 6689D8                          mov ax, bx ; now eax = 0000ax
    50 00000044 0305[04000000]                  add eax, dword[e] ; eax = (a-b+c*128)/(a+b)+e
    51 0000004A BA00000000                      mov edx, 0 
    52 0000004F 83D200                          adc edx, 0 ; carry from eax+e, maybe, so now edx+e is in EDX:EAX
    53                                          
    54                                          ; thus it is now a qword, subtract x from it
    55 00000052 2B05[08000000]                  sub eax, dword[x]
    56 00000058 1B15[0C000000]                  sbb edx, dword[x+4]
    57                                          
    58 0000005E A3[10000000]                    mov [r], eax
    59 00000063 8915[14000000]                  mov [r+4], edx ; edx:eax at location r
    60                                          
    61                                          
    62                                          
    63                                          ; exit(0)
    64 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
