     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 05                          a db 5
    14 00000001 0800                        b dw 8
    15 00000003 0B000000                    c dd 11
    16 00000007 6400000000000000            d dq 100
    17 0000000F <res 00000008>              r resq 1
    18                                      
    19                                  
    20                                  ;(d+d-b)+(c-a)+ d = 298 = 0x012A in our example
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 A1[07000000]                    mov eax, [d]
    24 00000005 8B15[0B000000]                  mov edx, [d+4]
    25 0000000B 8B1D[07000000]                  mov ebx, [d]
    26 00000011 8B0D[0B000000]                  mov ecx, [d+4]
    27 00000017 01D8                            add eax, ebx ; add the lower halfs of d together, then add with the carry flag the higher parts
    28                                          ; (the CF at the middle, end of addition of lower half part)
    29 00000019 11CA                            adc edx, ecx
    30                                          ; result in EDX:EAX
    31                                          ; b is a word, make it a dword so we subtract it from EAX (lower dword part of EDX:EAX)
    32                                          ; if we substract it from AX only, risk a CF remaining, and we can't access higher part of EAX
    33                                          ; this way no CF
    34 0000001B BB00000000                      mov EBX, 0 
    35 00000020 668B1D[01000000]                mov BX, [b] ;EBX= 00 00 b
    36                                          
    37 00000027 29D8                            sub EAX, EBX ;eax=eax-b; edx:eax = d+d-b
    38                                          
    39 00000029 8B1D[07000000]                  mov ebx, [d]
    40 0000002F 8B0D[0B000000]                  mov ecx, [d+4] ; ECX:EBX = d, add it to EDX:EAX
    41 00000035 01D8                            add eax, ebx
    42 00000037 11CA                            adc edx, ecx ; EDX:EAX = (d+d-b)+ d 
    43                                          
    44                                          ; make a a double word in ebx, make ebx 0 and put it in BL
    45 00000039 BB00000000                      mov ebx, 0
    46 0000003E 8A1D[00000000]                  mov bl, [a] ;ebx = 00 00 00 a
    47 00000044 8B0D[03000000]                  mov ecx, [c] ; ecx = c
    48 0000004A 29D9                            sub ecx, ebx ; ecx = c - a, a was a byte so no need for any carry
    49                                          
    50 0000004C 01C8                            add eax, ecx ; eax=eax+ecx, basically add c-a dword to the lower part of EDX:EAX
    51                                          ; now maybe a carry at the middle so
    52 0000004E 83D200                          adc edx, 0; only add the carry at the beginning of the higher part if it exists
    53                                          
    54 00000051 A3[0F000000]                    mov [r], eax 
    55 00000056 8915[13000000]                  mov [r+4], edx ; r = EDX:EAX, inverse in memory
    56                                          
    57                                          
    58                                      
    59                                          ; exit(0)
    60 0000005C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 0000005E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
