     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 C27B9F51                    M dd 0x519F7BC2 ; = 0101 0001 1001 1111 0111 1011 1100 0010
    14 00000004 00000000                    MNew dd 0
    15                                  
    16                                  ; Given the doubleword M, compute the doubleword MNew as follows:
    17                                  ; the bits 0-3 a of MNew are the same as the bits 5-8 a of M.
    18                                  ; the bits 4-7 a of MNew have the value 1
    19                                  ; the bits 27-31 a of MNew have the value 0
    20                                  ; the bits 8-26 of MNew are the same as the bits 8-26 a of M.
    21                                  
    22                                  ; in our case, MNew should be 0000 0001 1001 1111 0111 1011 1111 1110
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 A1[00000000]                    mov eax, [M]
    26                                          ;isolate bits 5-8 of M
    27 00000005 25E0010000                      and eax, 0x000001E0 ; this isolates bits 5-8, basically and them with a dword that has bits 5-8 1    
    28                                          ; rotate the now 5-8 bits of M in eax at positions 5-8, 5 positions to the right
    29                                          ; to make them bits 0-3 of EAX, then or those bits of MNew, thus putting bits 0-3 of eax in bits 0-3 of Mnew
    30 0000000A B105                            mov cl, 5
    31 0000000C D3C8                            ror eax, cl
    32 0000000E 0905[04000000]                  or dword[MNew], eax
    33                                          
    34 00000014 810D[04000000]F000-             or dword[MNew], 0x000000F0 ; or them with a dword that has bits 4-7 1, so they are also 1
    34 0000001C 0000               
    35                                          ; bits 27-31 of MNew have value 0 already, so don't interfere with them
    36                                          ; but if we wanted to make them 0, just use AND Mnew with a dword that has bits 27-31 0
    37                                          ; thus making them 0 in any case
    38                                          
    39                                          ; put M in eax and isolate bits 8-26 of M, and since we want to put them on bits 8-26 of MNew anyway
    40                                          ; no need to rotate them, just OR them with MNew
    41 0000001E A1[00000000]                    mov eax, [M]
    42 00000023 2500FFFF07                      and eax, 0x07FFFF00 ; so bits 0-3 and 4-7 are always 0 , and bits 27 and 28-31 too
    43                                          ;the rest are 1, to put the bits of EAX there, bits 8-26 of M
    44 00000028 0905[04000000]                  or dword[MNew], eax
    45                                          
    46                                          
    47                                          ; exit(0)
    48 0000002E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000030 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
