     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 616263373267363741-         text db "abc72g67AB1CD151@#8", 0
    15 00000009 423143443135314023-
    15 00000012 3800               
    16                                      text_len equ $-text
    17 00000014 00<rept>                    new_text times text_len db 0
    18 00000028 7700                        access_mode db "w", 0
    19 0000002A FFFFFFFF                    file_descriptor dd -1
    20                                  
    21                                  ; 24. A file name and a text (defined in data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Replace all digits from the text with character 'C'. Create a 
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 BE[00000000]                    mov esi, text
    25 00000005 B914000000                      mov ecx, text_len
    26 0000000A BF[14000000]                    mov edi, new_text
    27 0000000F E356                            jecxz endOfProgram
    28 00000011 FC                              cld
    29                                          
    30                                          convertLoop:
    31 00000012 AC                                  lodsb ; al = [esi], esi++
    32 00000013 88C3                                mov bl, al
    33 00000015 80EB30                              sub bl, 48; digits in ascii are 48-57, so do al-48 and see if it is lower than or equal to 9, then it is a digit
    34 00000018 80FB09                              cmp bl, 9
    35 0000001B 7603                                jbe convert_to_C
    36                                              
    37                                              ; not jumping, put al in [edi]
    38 0000001D AA                                  stosb ; [edi] = al, edi++
    39                                              
    40 0000001E EB05                                JMP endOfLoop
    41                                              
    42                                              convert_to_C:
    43 00000020 B043                                    mov al, 'C'
    44 00000022 AA                                      stosb ; [edi] = al, edi++
    45 00000023 EB00                                    jmp endOfLoop
    46                                                  
    47                                              endOfLoop:
    48 00000025 E2EB                            loop convertLoop
    49                                          
    50 00000027 68[28000000]                    push dword access_mode
    51 0000002C 68[14000000]                    push dword new_text
    52 00000031 FF15[00000000]                  call [fopen]
    53 00000037 83C408                          add esp, 4*2
    54                                          
    55 0000003A A3[2A000000]                    mov [file_descriptor], eax
    56                                          
    57 0000003F 83F800                          cmp eax, 0
    58 00000042 7423                            je endOfProgram ; if file successfuly created
    59                                          
    60                                          ; write the new_text to file
    61 00000044 68[14000000]                    push dword new_text
    62 00000049 FF35[2A000000]                  push dword [file_descriptor]
    63 0000004F FF15[00000000]                  call [fprintf]
    64 00000055 83C408                          add esp, 4*2
    65                                          
    66                                          ; exit the file by fclose()
    67 00000058 FF35[2A000000]                  push dword [file_descriptor]
    68 0000005E FF15[00000000]                  call [fclose]
    69 00000064 83C404                          add esp, 4
    70                                          endOfProgram:
    71                                      
    72                                          ; exit(0)
    73 00000067 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    74 00000069 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
