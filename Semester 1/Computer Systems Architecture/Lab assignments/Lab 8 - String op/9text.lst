     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00                          char db 0 
    15 00000001 00                          char_freq db 0
    16 00000002 73657175656E63652E-         file_name db "sequence.txt", 0
    16 0000000B 74787400           
    17 0000000F 7200                        access_mode db "r", 0
    18 00000011 FFFFFFFF                    file_descriptor dd -1
    19                                      len equ 100
    20 00000015 00<rept>                    text times len db 0
    21 00000079 00<rept>                    frequency times 256 db 0 ; frequency of ascii characters
    22                                  
    23                                      
    24                                  ; 9. A text file is given. Read the content of the file, determine the special character with the highest frequency and display the character along with its frequency on the screen. The name of text file is defined 
    25                                  segment code use32 class=code
    26                                      start:
    27 00000000 68[0F000000]                    push dword access_mode
    28 00000005 68[02000000]                    push dword file_name
    29 0000000A FF15[00000000]                  call [fopen]
    30 00000010 83C408                          add esp, 4*2 ; open file in reading mode
    31                                          
    32 00000013 A3[11000000]                    mov [file_descriptor], eax ;file descriptor returned by eax
    33                                          ; read the text from file using fread()
    34                                          ; after the fread() call, EAX will contain the number of chars we've read 
    35                                          ; eax = fread(text, 1, len, file_descriptor)
    36                                          
    37 00000018 FF35[11000000]                  push dword [file_descriptor]
    38 0000001E 6A64                            push dword len
    39 00000020 6A01                            push dword 1
    40 00000022 68[15000000]                    push dword text
    41 00000027 FF15[00000000]                  call [fread]
    42 0000002D 83C410                          add esp, 4*4
    43                                          
    44 00000030 89C1                            mov ecx, eax ; number of chars of our text
    45 00000032 E33D                            jecxz endOfProgram
    46                                          countFrequency:
    47 00000034 BB00000000                          mov ebx, 0
    48 00000039 8A99[14000000]                      mov bl, byte[text+ecx-1] ; from character n-1 to 0
    49 0000003F FE83[79000000]                      inc byte[frequency+ebx]
    50                                              
    51 00000045 E2ED                            loop countFrequency
    52                                          
    53 00000047 B900010000                      mov ecx, 256
    54 0000004C B3FF                            mov bl, -1
    55                                          mostFrequency:
    56 0000004E 3A99[78000000]                      cmp bl, byte[frequency+ecx-1]
    57 00000054 7C02                                JL new_high_frequency; below, make ebx equal to that frequency and dl equal to that character represented by ecx-1
    58 00000056 EB0B                                JMP endOfLoop
    59                                              new_high_frequency: 
    60                                               
    61 00000058 6689CA                                  mov dx, cx
    62 0000005B 664A                                    dec dx
    63 0000005D 8A99[78000000]                          mov bl, [frequency+ecx-1]
    64                                                 
    65                                              endOfLoop:
    66 00000063 E2E9                            loop mostFrequency
    67                                              
    68 00000065 8815[00000000]                  mov byte[char], dl
    69 0000006B 881D[01000000]                  mov byte[char_freq], bl
    70                                          endOfProgram:
    71                                          
    72 00000071 FF35[11000000]                  push dword [file_descriptor]
    73 00000077 FF15[00000000]                  call [fclose]
    74 0000007D 83C404                          add esp, 4
    75                                          
    76                                          
    77                                          
    78                                      
    79                                          ; exit(0)
    80 00000080 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    81 00000082 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
