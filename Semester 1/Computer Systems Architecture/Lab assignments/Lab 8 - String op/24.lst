     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf           ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 0A000000                    k dd 0xA
    17 0000000C 256400                      format db "%d", 0
    18                                      result resq 0
    19                                  
    20                                  ; 24. Two numbers a and b are given. Compute the expression value: (a/b)*k, where k is a constant value defined in data segment. Display the expression value (in base 2).
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 68[00000000]                    push dword a
    24 00000005 68[0C000000]                    push dword format
    25 0000000A FF15[00000000]                  call [scanf]
    26 00000010 83C408                          add esp, 4*2
    27                                          
    28 00000013 68[04000000]                    push dword b
    29 00000018 68[0C000000]                    push dword format
    30 0000001D FF15[00000000]                  call [scanf]
    31 00000023 83C408                          add esp, 4*2
    32                                          
    33 00000026 A1[00000000]                    mov eax, [a]
    34 0000002B 99                              cdq ; eax -> edx:eax
    35 0000002C F73D[04000000]                  idiv dword[b] ; EDX:EAX/[b] -> a/b, result in EAX
    36                                          
    37 00000032 F72D[08000000]                  imul dword[k] ; EDX:EAX = EAX*k = (a/b)*k
    38 00000038 A3[0F000000]                    mov [result], eax
    39                                          ; assume the result will fit on a dword, hopefully
    40                                          
    41 0000003D FF35[0F000000]                  push dword[result]
    42 00000043 68[0C000000]                    push dword format
    43 00000048 FF15[00000000]                  call [printf]
    44 0000004E 83C408                          add esp, 4*2
    45                                          ; exit(0)
    46 00000051 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000053 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
