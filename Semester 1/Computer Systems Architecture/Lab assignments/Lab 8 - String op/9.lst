     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf         ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 00000000                    result dd 0 
    17 0000000C 256400                      format db "%d", 0
    18                                  
    19                                  ;9. Read two numbers a and b (base 10) from the keyboard and calculate: (a+b)/(a-b). The quotient will be stored in a variable called "result" (defined in the data segment). The values are considered in signed repre
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 68[00000000]                    push dword a
    23 00000005 68[0C000000]                    push dword format
    24 0000000A FF15[00000000]                  call [scanf]
    25 00000010 83C408                          add esp, 4*2 ; read a
    26                                          
    27 00000013 68[04000000]                    push dword b
    28 00000018 68[0C000000]                    push dword format 
    29 0000001D FF15[00000000]                  call [scanf]
    30 00000023 83C408                          add esp, 4*2 ; read b
    31                                          
    32 00000026 A1[00000000]                    mov eax, [a]
    33 0000002B 0305[04000000]                  add eax, [b] ; eax = a+b
    34                                          
    35 00000031 8B1D[00000000]                  mov ebx, [a]
    36 00000037 2B1D[04000000]                  sub ebx, [b] ; ebx = a - b
    37                                          
    38 0000003D 99                              cdq ; EAX -> EDX:EAX signed conversion, EDX:EAX = a+b
    39 0000003E F7FB                            idiv ebx ; EDX:EAX/EBX -> quotient in EAX = (a+b)/(a-b)
    40                                          
    41 00000040 A3[08000000]                    mov [result], eax ; result 
    42                                          
    43 00000045 FF35[08000000]                  push dword [result]
    44 0000004B 68[0C000000]                    push dword format
    45 00000050 FF15[00000000]                  call [printf]
    46 00000056 83C408                          add esp, 4*2
    47                                          
    48                                          
    49                                          
    50                                          ; exit(0)
    51 00000059 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 0000005B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
