     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0201FD00                    A db 2, 1, -3, 0
    14                                      lenA equ $-A
    15 00000004 040507060201                B db 4, 5, 7, 6, 2, 1
    16                                      lenB equ $-B
    17 0000000A 00<rept>                    R times (lenA+lenB) db 0 ; allocate lenA+lenB for R which has the elements of B and A in reverse order
    18                                  
    19                                  ; Two byte strings A and B are given. Obtain the string R by concatenating the elements of B in reverse order and the elements of A in reverse order
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; need two loops: one to concatenate the elements of B to R in reverse order
    23                                                          ; and the other one to concatenate A in reverse order to R
    24                                          ; use ECX to run the loop, and use ECX to also get the elements of B (or A) in reverse order
    25                                          ; ECX = lenB -> the last element of B is ECX-1, and it decrements from there
    26                                          ; then, last ECX will be 1, and so the first element of B will be ECX-1=1-1=0
    27                                          ; before the loop finishes, this is the logic of the program
    28                                          ; also, use ESI to iterate through R, incrementing it with 1 after every element added in R
    29 00000000 BE00000000                      mov ESI, 0
    30                                          
    31 00000005 B906000000                      mov ECX, lenB
    32 0000000A E30F                            jecxz endBReverseLoop
    33                                          BReverseLoop:
    34 0000000C 8A81[03000000]                      mov al, [B+ECX-1] ; base + index*scale + constant = B+(ECX-1)*1+0
    35 00000012 8886[0A000000]                      mov [R+esi], al ; R[esi] = B[ecx-1], elements of B in reverse order since ECX is decremented
    36 00000018 46                                  inc esi ; esi++
    37 00000019 E2F1                            loop BReverseLoop
    38                                          endBReverseLoop:
    39                                          
    40 0000001B B904000000                      mov ECX, lenA
    41 00000020 E30F                            jecxz endAReverseLoop
    42                                          AReverseLoop:
    43 00000022 8A81[FFFFFFFF]                      mov al, [A+ECX-1]
    44 00000028 8886[0A000000]                      mov [R+esi], al
    45 0000002E 46                                  inc esi
    46 0000002F E2F1                            loop AReverseLoop
    47                                          endAReverseLoop:
    48                                          ; exit(0)
    49 00000031 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000033 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
