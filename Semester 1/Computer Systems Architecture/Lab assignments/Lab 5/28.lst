     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 2B34326138345835            s1 db '+', '4', '2', 'a', '8', '4', 'X', '5'
    14                                      lens1 equ $-s1
    15 00000008 613435                      s2 db 'a', '4', '5'
    16                                      lens2 equ $-s2
    17 0000000B 00<rept>                    d times (lens1+lens2) db 0
    18                                      
    19                                  
    20                                     
    21                                  ; Two character strings S1 and S2 are given. Obtain the string D by concatenating the elements found on the positions multiple of 3 from S1 and the elements of S2 in reverse order.
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 BE[00000000]                    mov esi, s1
    25 00000005 BF[0B000000]                    mov edi, d
    26 0000000A B908000000                      mov ecx, lens1 ; run the loop for all the elems in s1
    27 0000000F FC                              cld
    28 00000010 66BA0000                        mov DX, 0 ;start at position 0 in lens1, see if this position DX is a multiple of 3
    29                                          
    30                                          s1MultiplesOf3:
    31 00000014 B303                                mov BL, 3
    32 00000016 6689D0                              mov AX, DX ;bring the index to AX for the division
    33 00000019 6642                                inc DX
    34                                              
    35 0000001B F6F3                                div BL ;AX/BL=AX/3 => remainder in AH, if it's not 0 jump
    36 0000001D 80FC00                              cmp AH, 0
    37 00000020 7503                                jnz dontAdd
    38                                              
    39                                              ; if we remained here, it's a multiple of 3
    40 00000022 A4                                  movsb ; s1[esi] in d[edi], esi++, edi++
    41 00000023 EB01                                jmp endOfs1MultiplesOf3
    42                                              
    43                                              dontAdd:
    44                                              ; if we jumped to the end, increment esi without storing it in edi
    45 00000025 46                                      inc esi
    46                                          
    47                                              endOfs1MultiplesOf3:
    48 00000026 E2EC                            loop s1MultiplesOf3
    49                                          
    50 00000028 BE[0A000000]                    mov esi, s2+lens2-1 ;both constants so addition works, reverse order start from last elem
    51 0000002D B903000000                      mov ecx, lens2
    52                                          s2Inversed:
    53 00000032 8A06                                mov al, byte[esi]
    54 00000034 8807                                mov [edi], al
    55 00000036 47                                  inc edi
    56 00000037 4E                                  dec esi
    57                                              
    58 00000038 E2F8                            loop s2Inversed
    59                                          ; exit(0)
    60 0000003A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 0000003C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
